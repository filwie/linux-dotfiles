" vim: set fdm=marker ts=2 sw=2 et:
scriptencoding utf-8

" Install vim-plug if not yet installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let g:ctags_supported_languages = ['assembler', 'awk', 'bash', 'c', 'cpp', 'erlang', 'fortran', 'html', 'java', 'javascript', 'lisp', 'lua', 'make', 'matlab', 'pascal', 'perl', 'php', 'sql', 'python', 'rexx', 'ruby', 'scheme', 'sh', 'tcl', 'tex', 'vim', 'vimscript', 'yacc', 'zsh']
let g:languages_to_lint = ['python', 'css', 'html', 'java', 'c', 'cpp', 'ansible', 'markdown', 'vim']
let g:tag_languages = ['html', 'xml', 'xhtml', 'jinja']

" Plugins
call plug#begin('~/.vim/plugged')
" File tree
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Tags
Plug 'ludovicchabant/vim-gutentags'
" Tags, file structure overview
Plug 'majutsushi/tagbar', {'for': g:ctags_supported_languages}
Plug 'tell-k/vim-autopep8', {'for': 'python'}
" Asynchronous syntax checking (replaced syntastic)
Plug 'w0rp/ale', {'for': g:languages_to_lint}
" Fat code completion
Plug 'Valloric/YouCompleteMe', { 'do': ':AsyncRun ./install.py --clang-completer --go-completer --js-completer'}
" Git indicatiors
Plug 'airblade/vim-gitgutter'
" Git wrapper
Plug 'tpope/vim-fugitive'
" Some ansible support
Plug 'chase/vim-ansible-yaml'
" Jinja2 template syntax
Plug 'glench/vim-jinja2-syntax'
" Dockerfile syntax
Plug 'ekalinin/Dockerfile.vim'
" Execute commands asyncronously
Plug 'skywind3000/asyncrun.vim'
" fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" handle quotes, parantheses etc.
Plug 'tpope/vim-surround'
" Highlight RGB color codes in multiple filetypes
Plug 'ap/vim-css-color'
" Highlight the encloding html/xml tags
Plug 'valloric/MatchTagAlways', {'for': g:tag_languages}
" Tickscript support
Plug 'nathanielc/vim-tickscript', {'for': 'tick'}
" Gruvbox spinoff with more contrast
Plug 'srcery-colors/srcery-vim'
" One of the best color schemes
Plug 'morhetz/gruvbox'
" tab completion
Plug 'ervandew/supertab'
" Navigation similar to Vimium
Plug 'justinmk/vim-sneak'
" Multiple cursors similar to Sublime
Plug 'terryma/vim-multiple-cursors'
" Filetype icons for nerd tree
Plug 'ryanoasis/vim-devicons', { 'on': 'NERDTreeToggle' }
call plug#end()

" ----- Plugin settings -----
" Autopep8 - formatting python code
let g:autopep8_disable_show_diff=0
let g:autopep8_ignore='E501'  " ignore specific PEP8 (line too long,)

" ale
let g:ale_lint_delay = 500
let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_save = 1
let g:ale_sign_column_always = 1
let g:ale_echo_msg_format = '[%linter%] %s %code%'
let g:ale_sign_warning = ''
let g:ale_sign_error = ''
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" gitgutter
let g:gitgutter_override_sign_column_highlight = 0

" NerdTree
let g:NERDTreeMouseMode=3
"let NERDTreeDirArrowExpandable = ''
"let NERDTreeDirArrowCollapsible = ''

" DevIcons
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
let g:DevIconsDefaultFolderOpenSymbol = ''

" set noshowmode
set laststatus=0

" AsyncRun
" set the quickfix window 6 lines height.
let g:asyncrun_open = 6
" ring the bell to notify you job finished
let g:asyncrun_bell = 1

" GitGutter
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" ALE
let g:ale_sign_warning = ''
let g:ale_sign_error = ''
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" ----- Key mapping -----

" now Q and W also work - my most common mistype
command! Q q
command! W w
command! Wq wq

" Move up/down on visual lines (wrapped work like no wrapped)
noremap  j gj
noremap  k gk
noremap <up> gk
noremap <down> gj

" Map familiar C-p to use fzf
map <C-p> :FZF<CR>
map <C-t> :GFiles<CR>
map <leader>p :Commands<CR>

map <leader>t :Tags<CR>
map <leader>b :Buffers<CR>

map <leader>nt :NERDTreeToggle<CR>
map <F8> :TagbarToggle<CR>

" YouCompleteMe
" jump to definiton
map <leader>jd :YcmCompleter GoTo<CR>
let g:ycm_global_ycm_extra_conf = '$HOME/.ycm_extra_conf.py'
let g:ycm_autoclose_preview_window_after_insertion = 1

" toggle quickfix window
nnoremap <leader>q :call asyncrun#quickfix_toggle(6)<CR>

" maps for sourcing, opening and autosourcing .vimrc
map <leader>vs :source $MYVIMRC<CR>
map <leader>v :vsplit $MYVIMRC<CR>

" map for reloading the config and restarting i3
map <leader>i3 :!link_dotfiles.sh<CR> <bar> :!i3-merge-conf.sh<CR> <bar> :AsyncRun i3-msg reload; i3-msg restart<CR>

" leave INSERT mode using C-c
inoremap <C-c> <Esc><Esc>

" ----- Command mapping -----
" Format and Sort JSON
com! FormatJSON %!python -m json.tool

" ----- Filetype specific -----
augroup python
  autocmd!
  " Run Python code
  autocmd FileType python nnoremap <buffer> <F10> :exec '!clear; python' shellescape(@%, 1)<CR>
  " Run pytest
  autocmd FileType python nnoremap <buffer> <F9> :exec '!clear;  pytest -v'<CR>
  " Format file
  autocmd FileType python nnoremap <leader>8 :Autopep8<CR>
augroup END

augroup ansible
  autocmd!
  autocmd FileType yaml.ansible,yaml,ansible nnoremap <buffer> <F9> :exec '!clear; ansible-playbook' shellescape(@%, 1)<CR>
  autocmd Filetype yaml setlocal ts=2 sw=2 sts=2 expandtab
augroup END

augroup ccpp
  autocmd!
  autocmd FileType c nnoremap <silent> <F9> :AsyncRun gcc -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <CR>
  autocmd FileType cpp nnoremap <F9> :AsyncRun g++ -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <CR>
  autocmd FileType c,cpp nnoremap <buffer> <F10> :exec '!clear; %:p:h/%:r' <CR>
augroup END

augroup vimscript
  autocmd!
  autocmd Filetype vim nnoremap <buffer> <F10> :exec '!clear' <bar> source % <CR>
augroup END

augroup markdown
  autocmd!
  autocmd FileType markdown nnoremap <buffer> <F10> :AsyncRun  grip "${VIM_FILEPATH}" --export "/tmp/${VIM_FILENOEXT}.html" && ${BROWSER} "/tmp/${VIM_FILENOEXT}.html"<CR>
augroup END


let g:markdown_fenced_languages = ['make', 'zsh', 'sh', 'json', 'tex', 'sql', 'ruby', 'jinja', 'html', 'css', 'yaml', 'ansible', 'lua', 'vim', 'java', 'python', 'javascript', 'xhtml', 'xml', 'c', 'cpp']

" ----- General options -----

" Disable automatic insertion of comment character
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

highlight ColorColumn term=standout
call matchadd('ColorColumn', '\%81v', 100)

" enables highlighting word with *, highlights on search
set hlsearch

" 4 spaces instead of a tab
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab " autoindent copyindent

" dont break lines automatically
set textwidth=0 wrapmargin=0

" " colorize sytanx
" if has('syntax') && !exists('g:syntax_on')
"   syntax enable
" endif

" show line numbers
set number

" set text encoding to UTF8
set termencoding=utf-8
set fileencoding=utf-8
set encoding=utf8

" make backspace work like most other apps
set backspace=2

" vsplit opens second file on the right instead of left
set splitright

" display line number and location percentage
set ruler

" disable .swp files
set noswapfile

" enable case insensitive search
set ignorecase

" enable searching when typing
set incsearch

" keep cursor this many characters from top/bot when scrolling
set scrolloff=15

" highlight matching braces/ paranthesis etc.
set showmatch

set showmode

set showcmd

" enable bottom menu with command completion etc
set wildmenu
set wildmode=list:longest,full

" reread file if running external command to change it
set autoread

" enable modelines
" WARNING: there have been modeline-based vulnerabilities in the past
set modeline

" enable mouse in both Vim and gVim
if has('mouse')
  " try a, r, v
  set mouse+=a
  if &term =~ '^screen' || &term =~ '^tmux'
    " Enable extended mouse while using tmux
    set ttymouse=xterm2
  endif
endif

" enable clipboard intergration, copying to clipboard
if has('clipboard')
  nnoremap y "+y
  vnoremap y "+y
  set clipboard=unnamedplus
endif

" ----- Theming, visual tweaks -----
silent colorscheme srcery
" opaque background (set AFTER theme)
highlight Normal guibg=NONE ctermbg=NONE
highlight SignColumn guibg=NONE ctermbg=NONE

" those quotest have to remain double
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

set termguicolors

set fillchars+=vert:\  " set to space
highlight VertSplit guibg=NONE ctermbg=NONE

" Enable italics in comments (important - put after colorscheme)
highlight Comment cterm=italic

" How many lines of history to save
set history=200

" Persistent undo
set undofile                " Save undos after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

let undodir='$HOME/.vim/undo'

if has('persistent_undo')
  call system('mkdir ' . undodir)
  set undofile
endif

" source .vimlocal if it exists
if filereadable(expand('$HOME/.vimlocal'))
  source '$HOME/.vimlocal'
endif
