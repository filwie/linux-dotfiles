" Plugins and Vundle
set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'        " plugin manager
Plugin 'scrooloose/nerdtree'         " file tree
Plugin 'majutsushi/tagbar'           " tags, file structure overview
Plugin 'ctrlpvim/ctrlp.vim'          " fuzzy file, buffr, ... finder
Plugin 'morhetz/gruvbox'             " favourite colorscheme
Plugin 'tell-k/vim-autopep8'         " auto pep8 format
Plugin 'w0rp/ale'                    " asynchronous syntax checking (replaced syntastic)
Plugin 'bkad/CamelCaseMotion'        " using b, w, e works better with camelCase
Plugin 'Valloric/YouCompleteMe'      " code completion
Plugin 'ap/vim-buftabline'           " buffers as tabs on top
Plugin 'airblade/vim-gitgutter'      " git indicators
Plugin 'itchyny/lightline.vim'       " light status bar at bottom
Plugin 'pearofducks/ansible-vim'     " Support for ansible
Plugin 'mattn/emmet-vim'             " Example: html:5_ <C-y>, -> generate html (_ is cursor)
Plugin 'glench/vim-jinja2-syntax'    " Jinja2 template syntax
Plugin 'syngan/vim-vimlint'          " Linter for viml
Plugin 'ekalinin/Dockerfile.vim'     " Dockerfile syntax
Plugin 'fatih/vim-go'                " golang support. Example: :GoLint, :GoCompile (REQUIRES: :GoInstallBinaries)
Plugin 'skywind3000/asyncrun.vim'    " Async execute shell comands
call vundle#end()                    " required
filetype plugin indent on            " required

" ----- Plugin settings -----
" Autopep8 - formatting python code
let g:autopep8_disable_show_diff=0
let g:autopep8_ignore="E501"  " ignore specific PEP8 (line too long,)

" ale

let g:ale_lint_delay = 500
let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_save = 1
let g:ale_sign_column_always = 1
let g:ale_echo_msg_format = '[%linter%] %s %code%'

" NerdTree
" Open Nerd tree if opening a directory
let g:NERDTreeHijackNetrw = 1
au VimEnter NERD_tree_1 enew | execute 'NERDTree '.argv()[0]

" Buftabline - set navigation like in firefox
let g:buftabline_numbers = 2
nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)

" Lightline
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ }
set noshowmode
set laststatus=2

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*

"  ansible-vim
let g:ansible_unindent_after_newline = 1

" ----- Key mapping -----
map <C-n> :NERDTreeToggle<CR>
map <F8> :TagbarToggle<CR>
map <F7> :source ~/.vimrc<CR>

" Run Python code
autocmd! FileType python inoremap <buffer> <F10> :exec '!clear; python' shellescape(@%, 1)<CR>
autocmd! FileType python nnoremap <buffer> <F10> <Esc>:exec '!clear; python' shellescape(@%, 1)<CR>
" Run pytest
autocmd! FileType python inoremap <buffer> <F9> :exec '!clear;  pytest -v'<CR>
autocmd! FileType python nnoremap <buffer> <F9> <Esc>:exec '!clear;  pytest -v'<CR>
" Run Ansible playbook
autocmd! FileType yaml.ansible inoremap <buffer> <F10> :exec '!clear; ansible-playbook' shellescape(@%, 1)<CR> 
autocmd! FileType yaml.ansible nnoremap <buffer> <F10> <Esc>:exec '!clear; ansible-playbook' shellescape(@%, 1)<CR> 

" Compile and run c++ code



autocmd! FileType cpp inoremap <buffer> <F9> :AsyncRun g++ -Wall -pedantic "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <CR>
autocmd! FileType cpp nnoremap <buffer> <F9> <Esc>:AsyncRun g++ -Wall -pedantic "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <CR>
autocmd! FileType cpp inoremap <buffer> <F10> :AsyncRun -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
autocmd! FileType cpp nnoremap <buffer> <F10> <Esc>:AsyncRun -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>

" Leave INSERT mode using C-c
inoremap <C-c> <Esc><Esc>

" ----- Command mapping -----
" Format and Sort JSON
com! FormatJSON %!python -m json.tool
com! FormatPython call Autopep8()

" ----- General options -----
" Disable automatic insertion of comment character
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

set hlsearch  " enables highlighting word with *, highlights on search
" 4 spaces instead of a tab
set tabstop=4 shiftwidth=4 expandtab
" 256 terminal colours:
set t_Co=256
" colorize sytanx
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif
" show line numbers
set number
" set text encoding to UTF8
set termencoding=utf-8
set fileencoding=utf-8
set encoding=utf8
" make backspace work like most other apps
set backspace=2
" vsplit opens second file on the right instead of left
set splitright
" display line number and location percentage
set ruler
" disable .swp files
set noswapfile
set showmode
set smarttab

set copyindent
set autoindent
autocmd Filetype yaml setlocal ts=2 sw=2 sts=2 expandtab
set showcmd
set wildmenu

set autoread

if has('mouse')
  set mouse=a
endif


" ----- Theming, visual tweaks -----
set background=light
let g:gruvbox_contrast_light='soft'
silent colorscheme gruvbox

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

set termguicolors

" Enable italics in comments (important - put after colorscheme)
highlight Comment cterm=italic

" GUI settings
set guioptions=
set guifont=mononoki\ 14

