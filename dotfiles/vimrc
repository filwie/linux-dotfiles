" vim: set fdm=marker ts=2 sw=2 et:
scriptencoding utf-8

" Install vim-plug if not yet installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'         " file tree
Plug 'majutsushi/tagbar'           " tags, file structure overview
Plug 'nathanaelkane/vim-indent-guides'  " indent lines
Plug 'morhetz/gruvbox'             " favourite colorscheme
Plug 'tell-k/vim-autopep8'         " auto pep8 format
Plug 'w0rp/ale'                    " asynchronous syntax checking (replaced syntastic)
Plug 'bkad/CamelCaseMotion'        " using b, w, e works better with camelCase
Plug 'Valloric/YouCompleteMe'      " code completion
Plug 'ap/vim-buftabline'           " buffers as tabs on top
Plug 'airblade/vim-gitgutter'      " git indicators
Plug 'itchyny/lightline.vim'       " light status bar at bottom
Plug 'chase/vim-ansible-yaml'      " ansible
Plug 'mattn/emmet-vim'             " Example: html:5_ <C-y>, -> generate html (_ is cursor)
Plug 'glench/vim-jinja2-syntax'    " Jinja2 template syntax
Plug 'syngan/vim-vimlint'          " Linter for viml
Plug 'ekalinin/Dockerfile.vim'     " Dockerfile syntax
Plug 'fatih/vim-go'                " golang support. Example: :GoLint, :GoCompile (REQUIRES: :GoInstallBinaries)
Plug 'skywind3000/asyncrun.vim'    " Async execute shell comands
Plug 'ryanoasis/vim-devicons'      " Filetype icons
Plug 'bronson/vim-trailing-whitespace'  " :FixWhitespaces
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'            " fzf in vim
Plug 'junegunn/goyo.vim'           " Distraction free writing
Plug 'mhinz/vim-startify'          " fancy start page
Plug 'tpope/vim-surround'          " handle quotes, parantheses etc.
call plug#end()


" ----- Plugin settings -----
" Autopep8 - formatting python code
let g:autopep8_disable_show_diff=0
let g:autopep8_ignore='E501'  " ignore specific PEP8 (line too long,)

" ale
let g:ale_lint_delay = 500
let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_save = 1
let g:ale_sign_column_always = 1
let g:ale_echo_msg_format = '[%linter%] %s %code%'
let g:ale_sign_warning = ''
let g:ale_sign_error = ''
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" NerdTree
" Open Nerd tree if opening a directory
let g:NERDTreeHijackNetrw = 1
autocmd VimEnter NERD_tree_1 enew | execute 'NERDTree '.argv()[0]

let NERDTreeDirArrowExpandable = ''
let NERDTreeDirArrowCollapsible = ''

" Buftabline - set navigation like in firefox
let g:buftabline_numbers = 2
nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)

set noshowmode
set laststatus=2

" AsyncRun
" set the quickfix window 6 lines height.
let g:asyncrun_open = 6
" ring the bell to notify you job finished
let g:asyncrun_bell = 1

" GitGutter
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" ALE
let g:ale_sign_warning = ''
let g:ale_sign_error = ''
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" Lightline
" taken from https://statico.github.io/vim3.html
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ }

" Goyo
" Hide tmux status bar and ALE info
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  ALEDisable
  " TODO: how about changing colorscheme to gruvbox light while in Goyo?
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  ALEEnable
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" ----- Key mapping -----

" now Q and W also work - my most common mistype
command! Q q
command! W w

" Map familiar C-p to use fzf
map <C-p> :FZF<CR>
map <leader>p :Commands<CR>

map <leader>p :Commands<CR>
map <leader>t :Tags<CR>
map <leader>b :Buffers<CR>

map <C-n> :NERDTreeToggle<CR>
map <F8> :TagbarToggle<CR>

map <leader>] :bnext<CR>
map <leader>[ :bprev<CR>

" Enable distraction free mode
map <leader>df :Goyo<CR>

" you complete me
" jump to definiton
map <leader>jd :YcmCompleter GoTo<CR>

" toggle quickfix window
nnoremap <leader>q :call asyncrun#quickfix_toggle(6)<CR>

" maps for sourcing, opening and autosourcing .vimrc
map <leader>vs :source $MYVIMRC<CR>
map <leader>v :vsplit $MYVIMRC<CR>

" map for reloading the config and restarting i3
map <leader>i3 :AsyncRun !i3-merge-conf && echo "Merged i3 config"; i3-msg reload; i3-msg restart<CR>

" leave INSERT mode using C-c
imap <C-c> <Esc><Esc>

" ----- Command mapping -----
" Format and Sort JSON
com! FormatJSON %!python -m json.tool
com! FormatPython call Autopep8()
com! DistractionFree Goyo

" ----- Filetype specific -----
augroup python
  autocmd!
  " Run Python code
  autocmd FileType python nmap <buffer> <F10> :exec '!clear; python' shellescape(@%, 1)<CR>
  autocmd FileType python imap <buffer> <F10> <Esc>:exec '!clear; python' shellescape(@%, 1)<CR>
  " Run pytest
  autocmd FileType python nmap <buffer> <F9> :exec '!clear;  pytest -v'<CR>
  autocmd FileType python imap <buffer> <F9> <Esc>:exec '!clear;  pytest -v'<CR>
  " Format file
  autocmd FileType python nmap <leader>8 :Autopep8<CR>
augroup END

augroup ansible
  autocmd!
  " Run Ansible playbook
  autocmd FileType yaml.ansible nmap <buffer> <F10> :exec '!clear; ansible-playbook' shellescape(@%, 1)<CR>
  autocmd FileType yaml.ansible imap <buffer> <F10> <Esc>:exec '!clear; ansible-playbook' shellescape(@%, 1)<CR>
augroup END

augroup ccpp
  autocmd!
  " Compile C
  autocmd FileType c nmap <silent> <F9> :AsyncRun gcc -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <CR>
  autocmd FileType c imap <silent> <F9> <Esc>:AsyncRun gcc -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <CR>
  " Compile
  autocmd FileType cpp nmap <F9> :AsyncRun g++ -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <CR>
  autocmd FileType cpp imap <F9> <Esc>:AsyncRun g++ -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <CR>
  " Execute
  autocmd FileType c,cpp nmap <buffer> <F10> :exec '!clear; %:p:h/%:r' <CR>
  autocmd FileType c,cpp imap <buffer> <F10> <Esc> :exec '!clear; %:p:h/%:r' <CR>
augroup END

augroup vimscript
  autocmd!
  " Run vim script
  autocmd Filetype vim nmap <buffer> <F10> :exec '!clear' <bar> source % <CR>
  autocmd Filetype vim imap <buffer> <F10> <Esc> :exec '!clear' <bar> source % <CR>
augroup END

augroup markdown
  autocmd!
  autocmd FileType markdown nmap <buffer> <F10> :AsyncRun pandoc "${VIM_FILEPATH}" --to html5 --output "/tmp/${VIM_FILENOEXT}.html" --css "${HOME}/.dotfiles/utils/md.css"; ${BROWSER} "/tmp/${VIM_FILENOEXT}.html"<CR>
augroup END

" ----- General options -----

" Disable automatic insertion of comment character
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

if exists('+colorcolumn')
  set colorcolumn=80
endif

" enables highlighting word with *, highlights on search
set hlsearch

" 4 spaces instead of a tab
set tabstop=4 shiftwidth=4 expandtab

" dont break lines automatically
set textwidth=0 wrapmargin=0

" colorize sytanx
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" show line numbers
set number

" set text encoding to UTF8
set termencoding=utf-8
set fileencoding=utf-8
set encoding=utf8

" make backspace work like most other apps
set backspace=2

" vsplit opens second file on the right instead of left
set splitright

" display line number and location percentage
set ruler

" disable .swp files
set noswapfile

" enable case insensitive search
set ignorecase

" enable searching when typing
set incsearch

" keep cursor this many characters from top/bot when scrolling
set scrolloff=15

" highlight matching braces/ paranthesis etc.
set showmatch

set showmode
set smarttab

set copyindent
set autoindent
autocmd Filetype yaml setlocal ts=2 sw=2 sts=2 expandtab
set showcmd

" enable bottom menu with command completion etc
set wildmenu
set wildmode=list:longest,full

" reread file if running external command to change it
set autoread

" enable modelines
" WARNING: there have been modeline-based vulnerabilities in the past
set modeline

" enable mouse in both Vim and gVim
if has('mouse')
  " try a, r, v
  set mouse=a
endif

" enable clipboard intergration, copying to clipboard
nnoremap y "+y
vnoremap y "+y
set clipboard=unnamedplus

" ----- Theming, visual tweaks -----
set background=dark
let g:gruvbox_contrast_light='medium'
let g:gruvbox_contrast_dark='medium'
silent colorscheme gruvbox

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

set termguicolors

" Enable italics in comments (important - put after colorscheme)
highlight Comment cterm=italic

" GUI settings
if has('gui')
  set guioptions=
  set guifont=mononoki\ Nerd\ Font\ 14
  set autochdir
  set shell=/bin/zsh
endif

" How many lines of history to save
set history=200

" Persistent undo
set undofile                " Save undos after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

let undodir='$HOME/.vim/undo'

if has('persistent_undo')
  call system('mkdir ' . undodir)
  set undofile
endif

" source .vimlocal if it exists
if filereadable(expand('$HOME/.vimlocal'))
  source '$HOME/.vimlocal'
endif
